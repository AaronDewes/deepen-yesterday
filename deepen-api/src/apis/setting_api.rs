/*
 * Deepen API
 *
 * Deepen API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`get_favorite_ip_options`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetFavoriteIpOptionsError {
    Status400(models::BadRequest400Response),
    Status401(models::Unauthorized401Response),
    Status404(models::GetFavoriteIpOptions404Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_setting_calendar`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSettingCalendarError {
    Status400(models::BadRequest400Response),
    Status401(models::Unauthorized401Response),
    Status404(models::GetSettingCalendar404Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_setting_notification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSettingNotificationError {
    Status401(models::Unauthorized401Response),
    Status500(models::InternalServerError500Response),
    Status503(models::Maintenance503Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_setting_qr`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetSettingQrError {
    Status400(models::BadRequest400Response),
    Status401(models::Unauthorized401Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`put_setting_calendar`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PutSettingCalendarError {
    Status400(models::BadRequest400Response),
    Status401(models::Unauthorized401Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_favorite_ips`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateFavoriteIpsError {
    Status400(models::UpdateFavoriteIps400Response),
    Status401(models::Unauthorized401Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_setting_notification`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateSettingNotificationError {
    Status400(models::BadRequest400Response),
    Status401(models::Unauthorized401Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status500(models::InternalServerError500Response),
    Status503(models::Maintenance503Response),
    UnknownValue(serde_json::Value),
}

pub async fn get_favorite_ip_options(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetFavoriteIpOptionsResponse, Error<GetFavoriteIpOptionsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/settings/favorite_ip_options",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetFavoriteIpOptionsResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetFavoriteIpOptionsResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetFavoriteIpOptionsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_setting_calendar(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetSettingCalendarResponse, Error<GetSettingCalendarError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/settings/calendar",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetSettingCalendarResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetSettingCalendarResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSettingCalendarError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_setting_notification(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetSettingNotificationResponse, Error<GetSettingNotificationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/settings/notification",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetSettingNotificationResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetSettingNotificationResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSettingNotificationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_setting_qr(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetSettingQrResponse, Error<GetSettingQrError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/settings/qr",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetSettingQrResponse`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetSettingQrResponse`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetSettingQrError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn put_setting_calendar(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
    put_setting_calendar_request: Option<models::PutSettingCalendarRequest>,
) -> Result<(), Error<PutSettingCalendarError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;
    let p_put_setting_calendar_request = put_setting_calendar_request;

    let uri_str = format!(
        "{}/{locale}/settings/calendar",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_put_setting_calendar_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<PutSettingCalendarError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn update_favorite_ips(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
    put_setting_favorite_ips_request: Option<models::PutSettingFavoriteIpsRequest>,
) -> Result<(), Error<UpdateFavoriteIpsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;
    let p_put_setting_favorite_ips_request = put_setting_favorite_ips_request;

    let uri_str = format!(
        "{}/{locale}/settings/favorite_ips",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_put_setting_favorite_ips_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateFavoriteIpsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn update_setting_notification(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
    put_setting_notification_request: Option<models::PutSettingNotificationRequest>,
) -> Result<(), Error<UpdateSettingNotificationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;
    let p_put_setting_notification_request = put_setting_notification_request;

    let uri_str = format!(
        "{}/{locale}/settings/notification",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_put_setting_notification_request);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateSettingNotificationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
