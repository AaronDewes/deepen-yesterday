/*
 * Deepen API
 *
 * Deepen API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`get_event_schedule`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEventScheduleError {
    Status400(models::GetEventSchedule400Response),
    Status401(models::Unauthorized401Response),
    Status404(models::GetEventSchedule404Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_event_schedules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetEventSchedulesError {
    Status400(models::GetEventSchedules400Response),
    Status401(models::Unauthorized401Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_hidden_event_schedules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetHiddenEventSchedulesError {
    Status400(models::GetHiddenEventSchedules400Response),
    Status401(models::Unauthorized401Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_notify_event_schedules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetNotifyEventSchedulesError {
    Status400(models::GetNotifyEventSchedules400Response),
    Status401(models::Unauthorized401Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status500(models::InternalServerError500Response),
    Status503(models::Maintenance503Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`search_event_schedules`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum SearchEventSchedulesError {
    Status400(models::BadRequest400Response),
    Status401(models::Unauthorized401Response),
    Status403(models::GetAnnouncements403Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_event_schedule_user_settings`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateEventScheduleUserSettingsError {
    Status400(models::UpdateEventScheduleUserSettings400Response),
    Status401(models::Unauthorized401Response),
    Status404(models::UpdateEventScheduleUserSettings404Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UpdateEventScheduleUserSettings422Response),
    Status500(models::InternalServerError500Response),
    Status503(models::Maintenance503Response),
    UnknownValue(serde_json::Value),
}

pub async fn get_event_schedule(
    configuration: &configuration::Configuration,
    locale: &str,
    time_zone: &str,
    id: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetEventSchedule, Error<GetEventScheduleError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_time_zone = time_zone;
    let p_id = id;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/event_schedules/{id}",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    req_builder = req_builder.header("time_zone", p_time_zone.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetEventSchedule`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetEventSchedule`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetEventScheduleError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_event_schedules(
    configuration: &configuration::Configuration,
    locale: &str,
    time_zone: &str,
    start_date: String,
    end_date: String,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetEventSchedules, Error<GetEventSchedulesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_time_zone = time_zone;
    let p_start_date = start_date;
    let p_end_date = end_date;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/event_schedules",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("start_date", &p_start_date.to_string())]);
    req_builder = req_builder.query(&[("end_date", &p_end_date.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    req_builder = req_builder.header("time_zone", p_time_zone.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetEventSchedules`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetEventSchedules`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetEventSchedulesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_hidden_event_schedules(
    configuration: &configuration::Configuration,
    locale: &str,
    time_zone: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
    limit: Option<i64>,
    offset: Option<i64>,
) -> Result<models::GetHiddenEventSchedules, Error<GetHiddenEventSchedulesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_time_zone = time_zone;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;
    let p_limit = limit;
    let p_offset = offset;

    let uri_str = format!(
        "{}/{locale}/event_schedules/hidden",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    req_builder = req_builder.header("time_zone", p_time_zone.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetHiddenEventSchedules`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetHiddenEventSchedules`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetHiddenEventSchedulesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_notify_event_schedules(
    configuration: &configuration::Configuration,
    locale: &str,
    time_zone: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetNotifyEventSchedules, Error<GetNotifyEventSchedulesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_time_zone = time_zone;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/notify_event_schedules",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    req_builder = req_builder.header("time_zone", p_time_zone.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetNotifyEventSchedules`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetNotifyEventSchedules`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetNotifyEventSchedulesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn search_event_schedules(
    configuration: &configuration::Configuration,
    locale: &str,
    key: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::SearchEventSchedules, Error<SearchEventSchedulesError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_key = key;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/search_event_schedules",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    req_builder = req_builder.query(&[("key", &p_key.to_string())]);
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::SearchEventSchedules`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::SearchEventSchedules`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<SearchEventSchedulesError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn update_event_schedule_user_settings(
    configuration: &configuration::Configuration,
    locale: &str,
    time_zone: &str,
    event_schedule_id: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
    update_event_schedule_user_settings: Option<models::UpdateEventScheduleUserSettings>,
) -> Result<(), Error<UpdateEventScheduleUserSettingsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_time_zone = time_zone;
    let p_event_schedule_id = event_schedule_id;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;
    let p_update_event_schedule_user_settings = update_event_schedule_user_settings;

    let uri_str = format!(
        "{}/{locale}/event_schedules/{event_schedule_id}/user_settings",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale),
        event_schedule_id = crate::apis::urlencode(p_event_schedule_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    req_builder = req_builder.header("time_zone", p_time_zone.to_string());
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_event_schedule_user_settings);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateEventScheduleUserSettingsError> =
            serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
