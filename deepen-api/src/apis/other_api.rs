/*
 * Deepen API
 *
 * Deepen API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`health_check`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum HealthCheckError {
    Status412(models::PreconditionFailed412Response),
    UnknownValue(serde_json::Value),
}

pub async fn health_check(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<(), Error<HealthCheckError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/other/health_check",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<HealthCheckError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
