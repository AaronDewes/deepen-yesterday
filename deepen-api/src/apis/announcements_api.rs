/*
 * Deepen API
 *
 * Deepen API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`cors_support_get_announcement`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CorsSupportGetAnnouncementError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`cors_support_get_announcements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CorsSupportGetAnnouncementsError {
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_announcement`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAnnouncementError {
    Status400(models::GetAnnouncement400Response),
    Status401(models::Unauthorized401Response),
    Status404(models::GetAnnouncement404Response),
    Status412(models::PreconditionFailed412Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_announcement_unread_count`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAnnouncementUnreadCountError {
    Status400(models::GetAnnouncementUnreadCount400Response),
    Status401(models::Unauthorized401Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_announcements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAnnouncementsError {
    Status400(models::GetAnnouncements400Response),
    Status401(models::Unauthorized401Response),
    Status403(models::GetAnnouncements403Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status500(models::InternalServerError500Response),
    Status503(models::Maintenance503Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_home_announcements`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetHomeAnnouncementsError {
    Status400(models::GetHomeAnnouncements400Response),
    Status401(models::Unauthorized401Response),
    Status403(models::GetAnnouncements403Response),
    Status412(models::PreconditionFailed412Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`update_announcement`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum UpdateAnnouncementError {
    Status400(models::UpdateAnnouncement400Response),
    Status401(models::Unauthorized401Response),
    Status403(models::GetAnnouncements403Response),
    Status404(models::UpdateAnnouncement404Response),
    Status422(models::UnprocessableEntity422Response),
    Status503(models::Maintenance503Response),
    Status500(models::InternalServerError500Response),
    UnknownValue(serde_json::Value),
}

pub async fn cors_support_get_announcement(
    configuration: &configuration::Configuration,
    locale: &str,
    id: &str,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<(), Error<CorsSupportGetAnnouncementError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_id = id;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/announcements/{id}",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::OPTIONS, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CorsSupportGetAnnouncementError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn cors_support_get_announcements(
    configuration: &configuration::Configuration,
    locale: &str,
    debug_time_delta_seconds: Option<&str>,
    limit: Option<i64>,
    offset: Option<i64>,
) -> Result<(), Error<CorsSupportGetAnnouncementsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_limit = limit;
    let p_offset = offset;

    let uri_str = format!(
        "{}/{locale}/announcements",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration
        .client
        .request(reqwest::Method::OPTIONS, &uri_str);

    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<CorsSupportGetAnnouncementsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_announcement(
    configuration: &configuration::Configuration,
    locale: &str,
    id: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetAnnouncement, Error<GetAnnouncementError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_id = id;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/announcements/{id}",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAnnouncement`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAnnouncement`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAnnouncementError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_announcement_unread_count(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetAnnouncementUnreadCount, Error<GetAnnouncementUnreadCountError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/announcement_unread_count",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAnnouncementUnreadCount`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAnnouncementUnreadCount`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAnnouncementUnreadCountError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_announcements(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
    limit: Option<i64>,
    offset: Option<i64>,
) -> Result<models::GetAnnouncements, Error<GetAnnouncementsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;
    let p_limit = limit;
    let p_offset = offset;

    let uri_str = format!(
        "{}/{locale}/announcements",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_limit {
        req_builder = req_builder.query(&[("limit", &param_value.to_string())]);
    }
    if let Some(ref param_value) = p_offset {
        req_builder = req_builder.query(&[("offset", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAnnouncements`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAnnouncements`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAnnouncementsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn get_home_announcements(
    configuration: &configuration::Configuration,
    locale: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
) -> Result<models::GetHomeAnnouncements, Error<GetHomeAnnouncementsError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;

    let uri_str = format!(
        "{}/{locale}/home_announcements",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/octet-stream");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => return Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetHomeAnnouncements`"))),
            ContentType::Unsupported(unknown_type) => return Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetHomeAnnouncements`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetHomeAnnouncementsError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

pub async fn update_announcement(
    configuration: &configuration::Configuration,
    locale: &str,
    id: &str,
    operating_system: Option<&str>,
    application_version: Option<&str>,
    debug_time_delta_seconds: Option<&str>,
    debug_maintenance_mode: Option<i64>,
    update_announcement: Option<models::UpdateAnnouncement>,
) -> Result<(), Error<UpdateAnnouncementError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_locale = locale;
    let p_id = id;
    let p_operating_system = operating_system;
    let p_application_version = application_version;
    let p_debug_time_delta_seconds = debug_time_delta_seconds;
    let p_debug_maintenance_mode = debug_maintenance_mode;
    let p_update_announcement = update_announcement;

    let uri_str = format!(
        "{}/{locale}/announcements/{id}",
        configuration.base_path,
        locale = crate::apis::urlencode(p_locale),
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref param_value) = p_debug_maintenance_mode {
        req_builder = req_builder.query(&[("debug_maintenance_mode", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_operating_system {
        req_builder = req_builder.header("Operating-System", param_value.to_string());
    }
    if let Some(param_value) = p_application_version {
        req_builder = req_builder.header("Application-Version", param_value.to_string());
    }
    if let Some(param_value) = p_debug_time_delta_seconds {
        req_builder = req_builder.header("Debug-Time-Delta-Seconds", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    req_builder = req_builder.json(&p_update_announcement);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<UpdateAnnouncementError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
