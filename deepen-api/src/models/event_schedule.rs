/*
 * Deepen API
 *
 * Deepen API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct EventSchedule {
    /// イベントID
    #[serde(rename = "id")]
    pub id: String,
    /// 開始時刻. 終日のスケジュールの場合はその日の0時
    #[serde(rename = "started_at")]
    pub started_at: i64,
    /// 終了時刻. 終日のスケジュールの場合はその日の24時
    #[serde(rename = "ended_at")]
    pub ended_at: i64,
    /// 終日のスケジュールかどうか
    #[serde(rename = "all_day")]
    pub all_day: bool,
    /// イベント名
    #[serde(rename = "name")]
    pub name: String,
    /// アイコンのURL
    #[serde(rename = "icon_url")]
    pub icon_url: String,
    /// ユーザーに表示すべきカテゴリ名
    #[serde(rename = "category_name", deserialize_with = "Option::deserialize")]
    pub category_name: Option<String>,
    /// 任天堂の設定したメモ
    #[serde(rename = "memo")]
    pub memo: String,
    /// 関連するコンテンツのID.なければ空文字
    #[serde(rename = "link_content_id")]
    pub link_content_id: String,
    /// HOME画面に表示するかどうか
    #[serde(rename = "is_display_home_view")]
    pub is_display_home_view: bool,
    /// その他のイベントかどうか
    #[serde(rename = "is_other_event", skip_serializing_if = "Option::is_none")]
    pub is_other_event: Option<bool>,
    /// 大カテゴリ none: なし nintendo_direct: Nintendo Direct nintendo_switch_online: Nintendo Switch Online release_date: 発売日/配信び in_game_events: ゲーム内のイベント other_events: その他イベント
    #[serde(rename = "large_category")]
    pub large_category: String,
    /// イベントの終了期限が未設定かどうか
    #[serde(rename = "is_undefined_ended_at")]
    pub is_undefined_ended_at: bool,
    /// その日がイベント期間のなか日かどうか
    #[serde(rename = "is_middle_day")]
    pub is_middle_day: bool,
}

impl EventSchedule {
    pub fn new(
        id: String,
        started_at: i64,
        ended_at: i64,
        all_day: bool,
        name: String,
        icon_url: String,
        category_name: Option<String>,
        memo: String,
        link_content_id: String,
        is_display_home_view: bool,
        large_category: String,
        is_undefined_ended_at: bool,
        is_middle_day: bool,
    ) -> EventSchedule {
        EventSchedule {
            id,
            started_at,
            ended_at,
            all_day,
            name,
            icon_url,
            category_name,
            memo,
            link_content_id,
            is_display_home_view,
            is_other_event: None,
            large_category,
            is_undefined_ended_at,
            is_middle_day,
        }
    }
}
