/*
 * Deepen API
 *
 * Deepen API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserEventSchedule {
    /// イベントID
    #[serde(rename = "id")]
    pub id: String,
    /// 通知するかどうか
    #[serde(rename = "enable_notification")]
    pub enable_notification: bool,
    /// 何秒前に通知するのか。非通知の場合は 0。
    #[serde(
        rename = "notify_before_seconds",
        skip_serializing_if = "Option::is_none"
    )]
    pub notify_before_seconds: Option<i64>,
    /// 表示・非表示(互換性の都合により存在。クライアントにはtrueしか返されない)
    #[serde(rename = "is_hidden")]
    pub is_hidden: bool,
    /// ユーザがコンテンツの「カレンダーに登録」経由で追加したイベントか(任天堂イベントの詳細設定などで購読していないジャンルのイベントでも個別に表示するイベントか)
    #[serde(
        rename = "is_added_from_content",
        skip_serializing_if = "Option::is_none"
    )]
    pub is_added_from_content: Option<bool>,
    #[serde(rename = "event_schedule")]
    pub event_schedule: Box<models::EventSchedule>,
}

impl UserEventSchedule {
    pub fn new(
        id: String,
        enable_notification: bool,
        is_hidden: bool,
        event_schedule: models::EventSchedule,
    ) -> UserEventSchedule {
        UserEventSchedule {
            id,
            enable_notification,
            notify_before_seconds: None,
            is_hidden,
            is_added_from_content: None,
            event_schedule: Box::new(event_schedule),
        }
    }
}
