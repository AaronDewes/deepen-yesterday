/*
 * Deepen API
 *
 * Deepen API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserContent {
    /// コンテンツID
    #[serde(rename = "id")]
    pub id: String,
    /// 0: 未読 1: 既読 2: 読了
    #[serde(rename = "read_status")]
    pub read_status: i64,
    /// 後で見るに追加しているかどうか
    #[serde(rename = "include_watch_list")]
    pub include_watch_list: bool,
    /// 評価 0: 未評価 1: 役立つ 2: おもしろい 3: クール 4: キュート
    #[serde(rename = "evaluation")]
    pub evaluation: i64,
    /// コンテンツにリンクしている任天堂イベントスケジュールをカレンダーに表示・通知するかどうか contentのlink_event_schedule_idが空文字の場合は常にfalseになります
    #[serde(rename = "is_event_schedule_subscribe")]
    pub is_event_schedule_subscribe: bool,
    #[serde(rename = "content")]
    pub content: Box<models::Content>,
    /// 閲覧日時. GetBrowsingHistoryでのみ値を返します. 他のAPIではnullになります
    #[serde(
        rename = "browsed_at",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub browsed_at: Option<Option<i64>>,
}

impl UserContent {
    pub fn new(
        id: String,
        read_status: i64,
        include_watch_list: bool,
        evaluation: i64,
        is_event_schedule_subscribe: bool,
        content: models::Content,
    ) -> UserContent {
        UserContent {
            id,
            read_status,
            include_watch_list,
            evaluation,
            is_event_schedule_subscribe,
            content: Box::new(content),
            browsed_at: None,
        }
    }
}
