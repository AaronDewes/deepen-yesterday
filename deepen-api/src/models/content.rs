/*
 * Deepen API
 *
 * Deepen API
 *
 * The version of the OpenAPI document: 0.0.1
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct Content {
    /// コンテンツID
    #[serde(rename = "id")]
    pub id: String,
    /// コンテンツパネルの種類 1: 静止画 2: 動画
    #[serde(rename = "panel_type")]
    pub panel_type: i64,
    /// コンテンツの種類 1: 基本表示(webview) 2: 映像単体表示 3: 画像単体表示
    #[serde(rename = "content_type")]
    pub content_type: i64,
    /// プレミア公開かどうか
    #[serde(rename = "is_premiere")]
    pub is_premiere: bool,
    /// 基本表示(webview)用のURL
    #[serde(rename = "content_url")]
    pub content_url: String,
    /// 基本表示(webview)のifameで開くURL
    #[serde(rename = "content_body_url")]
    pub content_body_url: String,
    /// 画像単体表示用の画像URL
    #[serde(rename = "content_image_urls")]
    pub content_image_urls: Vec<String>,
    /// 映像単体表示用のURL
    #[serde(rename = "content_movie_url")]
    pub content_movie_url: String,
    /// サムネイルのURL
    #[serde(rename = "thumbnail_url")]
    pub thumbnail_url: String,
    /// コンテンツのカテゴリ (PRDの上段テキスト)
    #[serde(rename = "category")]
    pub category: String,
    /// カテゴリの色
    #[serde(rename = "category_color")]
    pub category_color: String,
    /// コンテンツのタイトル (PRDの下段テキスト)
    #[serde(rename = "title")]
    pub title: String,
    /// タイトルの色 0: 黒 1: 白
    #[serde(rename = "title_color")]
    pub title_color: i64,
    #[serde(rename = "tags")]
    pub tags: Vec<models::Tag>,
    /// リンクする任天堂イベントスケジュールID. 存在しない場合は空文字
    #[serde(rename = "link_event_schedule_id")]
    pub link_event_schedule_id: String,
    #[serde(
        rename = "link_group_event_schedules",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub link_group_event_schedules: Option<Option<Box<models::ContentLinkGroupEventSchedules>>>,
    /// パネルタイプが動画だった際の、動画停止時の静止画URL
    #[serde(rename = "static_url_for_panel_type_movie")]
    pub static_url_for_panel_type_movie: String,
    /// アイコンのURL
    #[serde(rename = "icon_url")]
    pub icon_url: String,
    /// パネルのwidth
    #[serde(rename = "panel_size_width")]
    pub panel_size_width: i64,
    /// パネルのheight
    #[serde(rename = "panel_size_height")]
    pub panel_size_height: i64,
    /// コンテンツグループのID. シリーズものではない場合は空文字
    #[serde(rename = "content_group_id")]
    pub content_group_id: String,
    /// コンテンツグループの番号. コンテンツグループのIDが空文字の場合は0
    #[serde(rename = "content_group_number")]
    pub content_group_number: i64,
    /// シリーズものの場合の閲覧履歴のある前話のコンテンツID GetContentでのみ返します. GetPersonalizedContents, GetContents, GetNewsContents, GetBrowsingHistoryなどでは必ず空文字を返します
    #[serde(rename = "prev_content_id")]
    pub prev_content_id: String,
    /// シリーズものの場合の閲覧履歴のある次話のコンテンツID GetContentでのみ返します. GetPersonalizedContents, GetContents, GetNewsContents, GetBrowsingHistoryなどでは必ず空文字を返します
    #[serde(rename = "next_content_id")]
    pub next_content_id: String,
    /// 販売ページの情報
    #[serde(rename = "shop_infos")]
    pub shop_infos: Vec<models::ShopInfo>,
    /// 権利表記
    #[serde(rename = "rights_notation")]
    pub rights_notation: String,
    /// 注記
    #[serde(rename = "note")]
    pub note: String,
    /// 公開終了日時
    #[serde(rename = "closed_at")]
    pub closed_at: i64,
    /// 購入ボタンを表示するかどうか
    #[serde(rename = "is_display_purchase_button")]
    pub is_display_purchase_button: bool,
    /// 動画のwidth. 動画単体表示でない場合は0
    #[serde(rename = "movie_size_width")]
    pub movie_size_width: i64,
    /// 動画のheight. 動画単体表示でない場合は0
    #[serde(rename = "movie_size_height")]
    pub movie_size_height: i64,
    /// 映像/画像単体表示でコンテンツパネルを表示する際に利用するWebのURL
    #[serde(rename = "panel_url")]
    pub panel_url: String,
    /// 中段テキスト
    #[serde(rename = "middle_text", deserialize_with = "Option::deserialize")]
    pub middle_text: Option<String>,
    #[serde(
        rename = "rating",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub rating: Option<Option<Box<models::ContentRating>>>,
    /// コンテンツグループ名. コンテンツグループのコンテンツでない場合は空文字になります
    #[serde(rename = "content_group_name")]
    pub content_group_name: String,
    /// 画像の縦幅. 画像単体表示でない場合は0
    #[serde(rename = "content_image_size_height")]
    pub content_image_size_height: i64,
    /// 画像の横幅. 画像単体表示でない場合は0
    #[serde(rename = "content_image_size_width")]
    pub content_image_size_width: i64,
    /// パッケージ型、ブログ型で利用するAkamaiのトークン. それ以外の場合は空文字になります
    #[serde(rename = "akamai_token")]
    pub akamai_token: String,
    /// 映像単体で利用するAkamaiのトークン. それ以外の場合は空文字になります
    #[serde(
        rename = "akamai_header_token",
        skip_serializing_if = "Option::is_none"
    )]
    pub akamai_header_token: Option<String>,
    /// 公開日時
    #[serde(rename = "opened_at")]
    pub opened_at: i64,
    /// このコンテンツがニュースかどうか
    #[serde(rename = "is_news")]
    pub is_news: bool,
}

impl Content {
    pub fn new(
        id: String,
        panel_type: i64,
        content_type: i64,
        is_premiere: bool,
        content_url: String,
        content_body_url: String,
        content_image_urls: Vec<String>,
        content_movie_url: String,
        thumbnail_url: String,
        category: String,
        category_color: String,
        title: String,
        title_color: i64,
        tags: Vec<models::Tag>,
        link_event_schedule_id: String,
        static_url_for_panel_type_movie: String,
        icon_url: String,
        panel_size_width: i64,
        panel_size_height: i64,
        content_group_id: String,
        content_group_number: i64,
        prev_content_id: String,
        next_content_id: String,
        shop_infos: Vec<models::ShopInfo>,
        rights_notation: String,
        note: String,
        closed_at: i64,
        is_display_purchase_button: bool,
        movie_size_width: i64,
        movie_size_height: i64,
        panel_url: String,
        middle_text: Option<String>,
        content_group_name: String,
        content_image_size_height: i64,
        content_image_size_width: i64,
        akamai_token: String,
        opened_at: i64,
        is_news: bool,
    ) -> Content {
        Content {
            id,
            panel_type,
            content_type,
            is_premiere,
            content_url,
            content_body_url,
            content_image_urls,
            content_movie_url,
            thumbnail_url,
            category,
            category_color,
            title,
            title_color,
            tags,
            link_event_schedule_id,
            link_group_event_schedules: None,
            static_url_for_panel_type_movie,
            icon_url,
            panel_size_width,
            panel_size_height,
            content_group_id,
            content_group_number,
            prev_content_id,
            next_content_id,
            shop_infos,
            rights_notation,
            note,
            closed_at,
            is_display_purchase_button,
            movie_size_width,
            movie_size_height,
            panel_url,
            middle_text,
            rating: None,
            content_group_name,
            content_image_size_height,
            content_image_size_width,
            akamai_token,
            akamai_header_token: None,
            opened_at,
            is_news,
        }
    }
}
