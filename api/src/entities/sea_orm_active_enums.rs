//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.0

use sea_orm::entity::prelude::*;

#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "animation_type")]
pub enum AnimationType {
    #[sea_orm(string_value = "birthday")]
    Birthday,
    #[sea_orm(string_value = "daily")]
    Daily,
    #[sea_orm(string_value = "event")]
    Event,
    #[sea_orm(string_value = "special")]
    Special,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "repeat_type")]
pub enum RepeatType {
    #[sea_orm(string_value = "none")]
    None,
    #[sea_orm(string_value = "yearly")]
    Yearly,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "skin_ip")]
pub enum SkinIp {
    #[sea_orm(string_value = "animal_crossing")]
    AnimalCrossing,
    #[sea_orm(string_value = "mario")]
    Mario,
    #[sea_orm(string_value = "pikmin")]
    Pikmin,
    #[sea_orm(string_value = "splatoon")]
    Splatoon,
    #[sea_orm(string_value = "zelda")]
    Zelda,
}
#[derive(Debug, Clone, PartialEq, Eq, EnumIter, DeriveActiveEnum)]
#[sea_orm(rs_type = "String", db_type = "Enum", enum_name = "title_color")]
pub enum TitleColor {
    #[sea_orm(string_value = "black")]
    Black,
    #[sea_orm(string_value = "white")]
    White,
}
